(define (iterative-mult a b)
	(define (mult-loop a b accu)
	 (cond ((= b 1) (+ a accu))
	 	   ((is-odd b) (mult-loop a (- b 1) (+ accu a)))
	 	   (else (mult-loop (double a) (halve b) accu))))
	(define (is-odd n) 
		(= (remainder n 2) 1))
	(define (double n) 
		(+ n n))
	(define (halve n)
		; let's just use division in this implementation; it's much easier
		(/ n 2))
	(mult-loop a b 0)
	)