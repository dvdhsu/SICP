(define (iterative-exp a power)
	(define (exp-loop a power accu)
	 (cond ((= power 1) (* a accu))
	 	   ((is-odd power) (exp-loop a (- power 1) (* accu a)))
	 	   (else (exp-loop (square a) (/ power 2) accu))))
	(define (is-odd n) 
		(= (remainder n 2) 1))
	(define (square n) 
		(* n n))
	(exp-loop a power 1)
	)